---
- name: Install Docker, AWS CLI, Pull ECR Image, and Run Streamlit App
  hosts: all
  become: yes
  gather_facts: yes  # Changed from 'no' to 'yes' to gather facts like IP, hostname, etc.
  vars:
    aws_region: "{{ lookup('env', 'AWS_REGION') }}"
    aws_access_key_id: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
    aws_secret_access_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
    ecr_registry: "409784048198.dkr.ecr.eu-north-1.amazonaws.com"
    ecr_image: "vetri:latest"
    container_name: "incident-tracker"
    app_port: 8501

  tasks:
    - name: Update apt and install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - unzip
        state: latest
        update_cache: yes

    - name: Download AWS CLI installer
      get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: /tmp/awscliv2.zip

    - name: Unzip AWS CLI installer
      unarchive:
        src: /tmp/awscliv2.zip
        dest: /tmp
        remote_src: yes

    - name: Install AWS CLI
      command: /tmp/aws/install --update
      register: aws_cli_install
      failed_when: "'error' in aws_cli_install.stderr"
      ignore_errors: no

    - name: Add Docker GPG key
      shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      args:
        executable: /bin/bash
      ignore_errors: no

    - name: Add Docker repository
      shell: |
        sudo add-apt-repository -y "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
      args:
        executable: /bin/bash
      ignore_errors: no

    - name: Install Docker
      apt:
        name: docker-ce
        state: latest
        update_cache: yes

    - name: Ensure Docker service is started and enabled
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Authenticate Docker with AWS ECR
      shell: |
        aws ecr get-login-password --region {{ aws_region }} | docker login --username AWS --password-stdin {{ ecr_registry }}
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
        AWS_REGION: "{{ aws_region }}"
      args:
        executable: /bin/bash
      register: docker_login_result
      failed_when: "'error' in docker_login_result.stderr"
      ignore_errors: no

    - name: Pull Docker image from ECR
      docker_image:
        name: "{{ ecr_registry }}/{{ ecr_image }}"
        source: pull
      register: docker_pull_result
      failed_when: "'error' in docker_pull_result.stderr"
      ignore_errors: no

    - name: Run Docker container for Streamlit app
      community.docker.docker_container:
        name: "{{ container_name }}"
        image: "{{ ecr_registry }}/{{ ecr_image }}"
        state: started
        restart_policy: always
        published_ports:
          - "{{ app_port }}:8501"
        env:
          AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
          AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
          AWS_DEFAULT_REGION: "{{ aws_region }}"
      register: streamlit_container_result
      failed_when: "'error' in streamlit_container_result.stderr"
      ignore_errors: no

    - name: Check if Streamlit app is running
      uri:
        url: "http://localhost:{{ app_port }}"
        method: GET
        status_code: 200
      register: streamlit_health_check
      retries: 5
      delay: 10
      until: streamlit_health_check.status == 200
      timeout: 60
