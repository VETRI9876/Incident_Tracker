---
- name: Install Docker, AWS CLI, and Deploy Docker Image from ECR
  hosts: all
  become: yes
  gather_facts: yes   # It's okay to gather facts now (fast)

  tasks:

    # Update apt cache only
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    # Install basic dependencies
    - name: Install basic dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present

    # Install Docker using the official script (much faster)
    - name: Install Docker using official script
      shell: |
        curl -fsSL https://get.docker.com -o get-docker.sh
        sh get-docker.sh
      args:
        executable: /bin/bash

    # Start and enable Docker service
    - name: Start Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    # Install AWS CLI
    - name: Install AWS CLI
      apt:
        name: awscli
        state: present

    # Configure AWS CLI using environment variables
    - name: Configure AWS CLI
      shell: |
        aws configure set aws_access_key_id {{ aws_access_key_id }}
        aws configure set aws_secret_access_key {{ aws_secret_access_key }}
        aws configure set region {{ aws_region }}
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
        AWS_REGION: "{{ aws_region }}"
      args:
        executable: /bin/bash

    # Authenticate Docker to AWS ECR
    - name: Authenticate Docker to AWS ECR
      shell: |
        aws ecr get-login-password --region {{ aws_region }} | docker login --username AWS --password-stdin {{ ecr_image_name.split('/')[0] }}
      args:
        executable: /bin/bash

    # Pull Docker image from ECR
    - name: Pull Docker image from ECR
      docker_image:
        name: "{{ ecr_image_name }}"
        source: pull

    # Run Docker container
    - name: Run Docker container
      docker_container:
        name: "incident_tracker_container"
        image: "{{ ecr_image_name }}"
        state: started
        restart_policy: unless-stopped
